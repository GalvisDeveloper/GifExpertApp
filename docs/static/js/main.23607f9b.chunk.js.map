{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridPanel.js","components/GifPanel.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","catg","alert","type","value","onChange","target","placeholder","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridPanel","className","src","alt","GifPanel","loading","state","setState","useEffect","then","imgs","useFetchGifs","key","GifExpertApp","mensaje","categories","prototype","PropTypes","string","isRequired","ReactDOM","render","document","getElementById"],"mappings":"6NAyCeA,EApCK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEHC,mBAAS,IAFN,mBAEhCC,EAFgC,KAEpBC,EAFoB,KAmBvC,OACI,0BAAMC,SAZW,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,GAC3BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,KAEdO,MAAM,iDAA4C,YAMlD,2BACIC,KAAK,OACLC,MAAOV,EACPW,SApBc,SAACR,GACvBF,EAAcE,EAAES,OAAOF,QAoBfG,YAAY,4D,uBC5BfC,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DACbC,EADa,iDACmCC,UAAUH,GAD7C,+DAEAI,MAAMF,GAFN,cAEbG,EAFa,gBAGIA,EAAKC,OAHT,uBAGXC,EAHW,EAGXA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATvB,kBAYZM,GAZY,4CAAH,sDCEPO,EAAe,SAAC,GAAkB,IAAjBb,EAAgB,EAAhBA,IAAKU,EAAW,EAAXA,MAE/B,OACI,yBAAKI,UAAY,4DACb,mCAASJ,GACT,yBAAKK,IAAKf,EAAKgB,IAAKN,MCHnBO,EAAW,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECHd,SAACA,GAAc,IAAD,EAEZhB,mBAAS,CAC/BuB,KAAM,GACNa,SAAS,IAJyB,mBAE/BC,EAF+B,KAExBC,EAFwB,KAmBtC,OAZAC,qBAAU,WACNxB,EAAQC,GACHwB,MAAK,SAAAC,GAEFH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAItB,CAACpB,IAEGqB,EDd2BK,CAAa1B,GAAjCa,EAFwB,EAE9BN,KAAca,EAFgB,EAEhBA,QAEtB,OACI,oCACI,wBAAIJ,UAAU,uDAAuDhB,GACnEoB,GAAW,uBAAGJ,UAAY,oDAAf,cACb,yBAAKA,UAAU,aAEPH,EAAOJ,KAAI,SAAAC,GAAG,OACV,kBAAC,EAAD,eACIiB,IAAKjB,EAAIC,IACLD,UEX1BkB,EAAe,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAAc,EAEE7C,mBAAS,CAAC,eAFZ,mBAE3B8C,EAF2B,KAEf/C,EAFe,KAIlC,OACI,oCACI,wBAAIiC,UAAU,0DAA0Da,GACxE,kBAAC,EAAD,CAAa9C,cAAeA,IAC5B,6BAEA,4BAEQ+C,EAAWrB,KAAI,SAAAT,GAAQ,OACnB,kBAAC,EAAD,CACI2B,IAAK3B,EACLA,SAAUA,UAUtC4B,EAAaG,UAAY,CACrBF,QAASG,IAAUC,OAAOC,YAIfN,QC3BfO,IAASC,OACP,kBAAC,EAAD,CAAcP,QAAQ,8BACtBQ,SAASC,eAAe,U","file":"static/js/main.23607f9b.chunk.js","sourcesContent":["\r\n\r\nimport React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst AddCategory = ({ setCategories }) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = (e) => {\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        if (inputValue.trim().length > 2) {\r\n            setCategories(catg => [inputValue, ...catg, ]);\r\n            setInputValue(\"\");\r\n        } else {\r\n            alert(\"Añada una categoria con nombre más largo\", \"Alerta\");\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input\r\n                type=\"text\"\r\n                value={inputValue}\r\n                onChange={handleInputChange}\r\n                placeholder=\"Ingrese una categoría para generar GIFs de ésta\"\r\n            />\r\n        </form>\r\n    );\r\n\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n\r\nexport default AddCategory;","\r\n\r\nexport const getGifs = async ( category ) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=30&api_key=kHA2LwEs6IlTUv66ibdSl7cc1CkB2VHD`;\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url,\r\n        }\r\n    });\r\n    return gifs;\r\n}\r\n","\r\n\r\nimport React from 'react'\r\n\r\nexport const GifGridPanel = ({url, title}) => {\r\n\r\n    return (\r\n        <div className = \"card animate__animated animate__bounce animate__delay-3s\">\r\n            <p>Gif: {title}</p>\r\n            <img src={url} alt={title} />\r\n        </div>\r\n    )\r\n}\r\n","\r\n\r\nimport React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { GifGridPanel } from './GifGridPanel';\r\n\r\nexport const GifPanel = ({ category }) => {\r\n\r\n    const { data: images, loading } = useFetchGifs(category);\r\n\r\n    return (\r\n        <>\r\n            <h3 className=\"animate__animated animate__bounce animate__rotateIn\">{category}</h3>\r\n            { loading && <p className = \"animate__animated animate__bounce animate__flash\">Loading...</p>}\r\n            <div className=\"card-grid\">\r\n                {\r\n                    images.map(img => (\r\n                        <GifGridPanel\r\n                            key={img.id}\r\n                            {...img}\r\n                        />\r\n                    ))\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import { useEffect, useState } from \"react\"\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = (category) => {\r\n\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect(() => {\r\n        getGifs(category)\r\n            .then(imgs => {\r\n                // setTimeout(() => {\r\n                setState({\r\n                    data: imgs,\r\n                    loading: false\r\n                });\r\n                // }, 1000);\r\n            })\r\n    }, [category])\r\n\r\n    return state;\r\n}\r\n\r\n","\r\n\r\nimport React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport AddCategory from './components/AddCategory';\r\nimport { GifPanel } from './components/GifPanel';\r\n\r\nconst GifExpertApp = ({ mensaje }) => {\r\n\r\n    const [categories, setCategories] = useState(['Fairy Tail']);\r\n\r\n    return (\r\n        <>\r\n            <h2 className=\"animate__animated animate__bounce animate__slideInDown\">{mensaje}</h2>\r\n            <AddCategory setCategories={setCategories} />\r\n            <hr />\r\n\r\n            <ol>\r\n                {\r\n                    categories.map(category => (\r\n                        <GifPanel\r\n                            key={category}\r\n                            category={category}\r\n                        />\r\n                    ))\r\n                }\r\n            </ol>\r\n\r\n        </>\r\n    );\r\n}\r\n\r\nGifExpertApp.prototype = {\r\n    mensaje: PropTypes.string.isRequired\r\n}\r\n\r\n\r\nexport default GifExpertApp;\r\n","\r\n\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport GifExpertApp from './GifExpertApp';\r\n\r\n\r\n\r\n// const divApp = document.querySelector('#app');\r\n\r\nReactDOM.render(\r\n  <GifExpertApp mensaje=\"GifExpertApp with ReactJs\" />,\r\n  document.getElementById('app')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n\r\n"],"sourceRoot":""}